@using Clube.Data
@using System.Text.RegularExpressions;
@using YoutubeExplode.Common;
@implements IObserver<double>
@inject YoutubeDownloaderService DownloaderService

<div class="row justify-content-center w-100 bg-white h-100 py-4" style="max-height: 100% !important;">
    <YoutubeLogo Width="40%" Height="auto"></YoutubeLogo>

    <form @onsubmit="@DownloadVideoFromURL" class="row justify-content-center w-100 px-4">

        <div class="mb-4 col-12 row mt-4 px-0">
            <InputText @bind-Value="YoutubeURLInputValue" class="form-control" placeholder="link do vídeo" id="youtubeURLToDownload" />
        </div>

        @if (!string.IsNullOrEmpty( videoURL ))
        {
            <div class="col-12 p-0 row justify-content-center">
                <VideoThumbnail VideoMetaData="@videoMetadata" VideoURL="@videoURL"></VideoThumbnail>
            </div>
        }

        @if (isDownloading)
        {
            <button type="submit" class="btn btn-outline-danger col-6" disabled>
                <i class="bi bi-broadcast"></i>
                @downloadProgress.ToString()%
            </button>
        }
        else
        {
            <button type="submit" class="btn btn-outline-danger col-12">
                <i class="bi bi-shift-fill"></i>
                Salvar
            </button>
        }
    </form>
</div>

@code {
    public static int downloadProgress = 0;

    public static string videoURL = "";
    public YoutubeExplode.Videos.Video? videoMetadata;

    public static bool downloadCompleted = false;
    public static bool downloadError = false;
    public static bool isDownloading = false;

    public YoutubeDownloaderService? downloaderService;
    private string youtubeURLInputValue  = "";

    private string YoutubeURLInputValue 
    { 
        get
        {
            return youtubeURLInputValue;
        }
        set
        {
            youtubeURLInputValue = value;
            InvokeAsync(DisplayThumbnailIfAvailable);
        } 
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        downloaderService = new YoutubeDownloaderService( new ProgressTracker( this ) );
        ClearForm();
    }

    public void ClearForm()
    {
        youtubeURLInputValue = "";
        videoURL = "";
        StateHasChanged();
    }

    public async Task DisplayThumbnailIfAvailable()
    {
        if (!string.IsNullOrEmpty( youtubeURLInputValue ))
        {
            var regexYoutubeVideoUrl = new Regex(@"^((?:https?:)?\/\/)?((?:www|m)\.)?((?:youtube(-nocookie)?\.com|youtu.be))(\/(?:[\w\-]+\?v=|embed\/|live\/|v\/)?)([\w\-]+)(\S+)?$");
            if (regexYoutubeVideoUrl.Match( youtubeURLInputValue ).Success)
            {
                videoMetadata = await downloaderService!.GetVideoMetadata( youtubeURLInputValue );
                videoURL = youtubeURLInputValue;
                StateHasChanged();
            }
        }
    }

    public async Task DownloadVideoFromURL()
    {
        if (!string.IsNullOrEmpty( youtubeURLInputValue ) && !isDownloading)
        {
            await downloaderService!.GetVideoAsync( youtubeURLInputValue );
        }
    }

    public void OnCompleted()
    {
        isDownloading = false;
        downloadCompleted = true;
        ClearForm();
    }

    public void OnError( Exception error )
    {
        isDownloading = false;
        downloadError = true;
        ClearForm();
    }

    public void OnNext( double value )
    {
        isDownloading = true;
        downloadProgress = (int)double.Round( value * 100 );
        StateHasChanged();
    }
}
