@using YoutubeExplode.Common;
@implements IAsyncDisposable
@inject IJSRuntime JS

<style>
    .video-thumbnail-popover {
        outline: 4px double #ab296a;
        --bs-popover-border-color: transparent;
        --bs-popover-header-bg: #ab296a;
        --bs-popover-header-color: white;
        --bs-popover-body-padding-x: 1rem;
        --bs-popover-body-padding-y: .5rem;
    }

    .popover-header{
        text-align: center !important;
    }
</style>

<a class="mb-4 d-flex justify-content-center" target="_blank" href="@VideoURL" style="max-width: 400px;" id="@ThumbId">
    <div class="card m-0">
        <img src="@ThumbURL" class="card-img-top" />
        <div class="card-body">
            <h5
                class="card-title text-center text-truncate">@VideoTitle</h5>
        </div>
    </div>
</a>

<script>
</script>

@code {
    [Parameter]
    public required string VideoURL { get; set; }

    [Parameter]
    public required YoutubeExplode.Videos.Video VideoMetadata { get; set; }

    private IJSObjectReference? module;

    public required string ThumbURL { get; set; }

    public required string VideoTitle { get; set; }

    public string ThumbId = $"containerVideoThumbnail{Guid.NewGuid().ToString()}";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        ThumbURL = VideoMetadata.Thumbnails.GetWithHighestResolution().Url;
        VideoTitle = VideoMetadata.Title;

        module = await JS.InvokeAsync<IJSObjectReference>( "import" , "./videoThumbnail.js" );
        await module.InvokeVoidAsync( "disposePopover" , ThumbId );
        await module.InvokeVoidAsync( "loadPopover" , ThumbId , VideoTitle , VideoMetadata.Author.ChannelTitle , VideoMetadata.Duration!.Value.ToString() );
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (VideoMetadata != null)
        {
            ThumbURL = VideoMetadata.Thumbnails.GetWithHighestResolution().Url;
            VideoTitle = VideoMetadata.Title;

            module = await JS.InvokeAsync<IJSObjectReference>( "import" , "./videoThumbnail.js" );
            await module.InvokeVoidAsync( "disposePopover" , ThumbId );
            await module.InvokeVoidAsync( "loadPopover" , ThumbId , VideoTitle , VideoMetadata.Author.ChannelTitle , VideoMetadata.Duration!.Value.ToString() );
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.InvokeVoidAsync( "disposePopover" , ThumbId );
            await module.DisposeAsync();
        }
    }
}
