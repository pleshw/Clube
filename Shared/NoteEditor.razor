<div class="row w-100 m-0" style="user-select: none !important;">
    <div class="card m-0 p-0 rounded-0">
        <div class="card-header rounded-0 py-0">
            <div class="border-0 text-center rounded-0 user-select-none">
                <input type="text" @bind:event="oninput" @bind="CurrentNote.Title" class="form-control-plaintext p-3 h-100 text-dark" style="font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;" placeholder="Título" />
            </div>
        </div>
        <div class="card-body">
            <div class="text-center rounded-0 user-select-none" style="height:150px;">
                <textarea @bind:event="oninput" @bind="CurrentNote.Value" class="form-control-plaintext p-3 h-100 text-dark" style="font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;" placeholder="Descrição..."></textarea>
            </div>
        </div>
        <div class="card-footer">
            <div class="rounded-0 d-flex align-items-center justify-content-center">
                <div class="form-control bg-transparent border-0 d-flex align-items-center" style="cursor: pointer;">
                    <input class="mx-3" style="cursor: pointer;" id="savePlayerNotesOnEnter" type="checkbox" />
                    <label style="cursor: pointer;font-size: 14px;" for="savePlayerNotesOnEnter">Salvar quando apertar enter</label>
                </div>
                <div class="form-control bg-transparent border-0 d-flex justify-content-center align-items-center row" style="cursor: cursor: @(IsCurrentNoteInvalid ? "default" : "pointer");">
                    <button type="button" @onclick="TryAddNote" class="btn btn-dark btn-sm col-6" disabled="@IsCurrentNoteInvalid">
                        Salvar
                    </button>
                </div>
            </div>
        </div>
    </div>

</div>


@code {
    [CascadingParameter]
    public required List<Note> Notes { get; set; }

    [CascadingParameter]
    public required Func<Task> OnNotesChanged { get; set; }

    public List<string> errorMessages = new();

    public Note CurrentNote { get; set; } = Note.GetEmpty();

    private async Task TryAddNote()
    {
        if(IsCurrentNoteInvalid)
        {
            return;
        }

        RPGNoteService.AddNote( CurrentNote );

        CurrentNote = Note.GetEmpty();
        Notes = RPGNoteService.GetNotes();
        await InvokeAsync( OnNotesChanged );
    }

    public bool IsCurrentNoteInvalid
    {
        get {
            return !Note.Validation.IsValid( CurrentNote , out errorMessages );
        }
    }
}


