@using Clube.Data.Spotify
@using Clube.Data;
@using System.Security.Claims
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory ClientFactory

@if (userSpotifyClaim == null || !userSpotifyClaim.IsAuthenticated)
{
    <div class="row justify-content-center align-content-center w-100 m-0 p-5">
        <SpotifyLoginButton></SpotifyLoginButton>
    </div>
}
else
{
    <div class="row justify-content-between align-content-center bg-spotify-black w-100 m-0 p-2 shadow" style="height: 90px;">
        <div class="row col-10 align-content-center align-items-center h-100">
            <div class="col-6 row p-3">
                <a href="https://open.spotify.com/" target="_blank">
                    <div class="col-12">
                        <img class="img-fluid" style="min-width: 100px;image-rendering: optimizeQuality!important;" src="icons/spotify-logo-green-nobg.png" />
                    </div>
                </a>
            </div>
            <div class="col-6">
                @if(CurrentTrack != null)
                {
                    <a target="_blank" class="text-decoration-none" href="@CurrentTrack.Uri">
                        <span style="font-size: 14px;" class="text-white fw-bold">@CurrentTrack.Name</span>
                    </a>
                }
            </div>
        </div>
        <div class="row col-2 justify-content-start align-items-center">
            <div class="row col-12 justify-content-center">
                <SpotifyPlayPauseButton PlayerComponent="_component" State="@(IsPlaying ? "playing" : "")"></SpotifyPlayPauseButton>
            </div>
        </div>
    </div>
}


@code {
    public static string? DeviceId{ get; set; }
    private IJSObjectReference? spotifyModule;
    private SpotifyJSInterop? spotifyJSInterop;
    public IJSObjectReference? spotifyPlayer;
    public static SpotifyWebPlaybackState? spotifyPlayerState;
    private static SpotifyPlayer? _component;

    public ClaimsIdentity? userSpotifyClaim;

    private static SpotifyWebPlaybackTrack? CurrentTrack;
    private static Timer? _timer;

    public static string? AccessToken;

    public bool IsPlaying {
        get
        {
            return spotifyPlayerState is not null 
                && spotifyPlayerState.Paused is not null 
                && !spotifyPlayerState.Paused.Value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userSpotifyClaim = authState.User.Identities.Where( i => i.IsAuthenticated && i.AuthenticationType == "Spotify" ).FirstOrDefault();
        AccessToken = authState.User.FindFirst("spotifyAccessToken")?.Value;
        spotifyJSInterop = new();

        _component = this;
    }

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        await base.OnAfterRenderAsync( firstRender );

        if (spotifyModule is null)
        {
            spotifyModule = await JS.InvokeAsync<IJSObjectReference>( "import" , "./spotify.js" );
        }

        if (firstRender && !string.IsNullOrEmpty( AccessToken ) && spotifyJSInterop is not null)
        {
            spotifyPlayer = await spotifyJSInterop.InitSpotifyPlayer( AccessToken , spotifyModule );
            await TransferPlaybackToPlayer();

            _timer = new System.Threading.Timer( async ( object? stateInfo ) =>
            {
                try
                {
                    await spotifyModule.InvokeVoidAsync( "getCurrentStateSpotifyPlayer" , spotifyPlayer );
                    await InvokeAsync( StateHasChanged );
                }
                catch
                {
                    _timer?.Dispose();
                }
            } , new System.Threading.AutoResetEvent( false ) , 1000 , 1000 );
        }
    }

    public async Task TransferPlaybackToPlayer()
    {
        if (string.IsNullOrEmpty( AccessToken ) || string.IsNullOrEmpty( DeviceId ))
        {
            return;
        }

        HttpClient client = ClientFactory.CreateClient();
        SpotifyPlaybackState? currentState = await client.GetPlayerPlaybackState( AccessToken );
        if (currentState != null && currentState.IsPlaying())
        {
            return;
        }

        string? response = await client.SetPlayerCurrentPlayback( AccessToken , DeviceId );
    }

    [JSInvokable( "TransferPlaybackToPlayerJS" )]
    public static async Task TransferPlaybackToPlayerJS()
    {
        if (_component == null || string.IsNullOrEmpty( AccessToken ) || string.IsNullOrEmpty( DeviceId ))
        {
            return;
        }

        HttpClient client = _component!.ClientFactory.CreateClient();
        SpotifyPlaybackState? currentState = await client.GetPlayerPlaybackState( AccessToken );
        if (currentState != null && currentState.IsConnectedToDevice( DeviceId ))
        {
            return;
        }

        string? response = await client.SetPlayerCurrentPlayback( AccessToken , DeviceId );
    }

    [JSInvokable( "SetSpotifyDeviceId" )]
    public static void SetSpotifyDeviceId( string? deviceId)
    {
        DeviceId = deviceId;
    }

    [JSInvokable( "SpotifyStateHasChanged" )]
    public static bool SpotifyStateHasChanged( SpotifyWebPlaybackState? spotifyWebPlaybackStateUpdated )
    {
        spotifyPlayerState = spotifyWebPlaybackStateUpdated;
        CurrentTrack = spotifyWebPlaybackStateUpdated?.TrackWindow?.CurrentTrack;
        _component?.Refresh();
        return true;
    }

    public void Refresh()
    {
        InvokeAsync(StateHasChanged);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (spotifyModule is not null)
        {
            await spotifyModule.InvokeVoidAsync( "disconnectSpotifyPlayer" , spotifyPlayer );
            await spotifyModule.DisposeAsync();
        }

        if(_timer is not null)
        {
            await _timer.DisposeAsync();
        }
    }
}
