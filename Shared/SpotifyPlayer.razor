@using Clube.Data.Spotify
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SpotifyUserContext SpotifyUserContext
@inject IHttpClientFactory ClientFactory

@if (SpotifyUserContext.AccessToken is null ||  SpotifyUserContext.CurrentUser is null)
{
    <SpotifyLoginButton></SpotifyLoginButton>
}
else
{
    <div class="row justify-content-between align-content-center bg-spotify-black w-100 m-0 p-2 shadow" style="height: 90px;">
        <div class="row col-10 align-content-center align-items-center h-100">
            <div class="col-6 row p-3">
                <a href="" target="_blank">
                    <div class="col-12">
                        <img class="img-fluid" style="min-width: 100px;image-rendering: optimizeQuality!important;" src="icons/spotify-logo-green-nobg.png" />
                    </div>
                </a>
            </div>
            <div class="col-6">
                <span style="font-size: 14px;" class="text-white fw-bold">@spotifyPlayerState?.TrackWindow?.CurrentTrack?.Name</span>
            </div>
        </div>
        <div class="row col-2 justify-content-start align-items-center">
            <div class="row col-12 justify-content-center">
                <button class="playing-state-button p-0 @(IsPlaying ? "playing" : "")" @onclick="PlaySpotify">
                    <svg role="img" height="16" width="16" aria-hidden="true" viewBox="0 0 16 16" data-encore-id="icon" class="spotify-pause-icon"><path d="M2.7 1a.7.7 0 0 0-.7.7v12.6a.7.7 0 0 0 .7.7h2.6a.7.7 0 0 0 .7-.7V1.7a.7.7 0 0 0-.7-.7H2.7zm8 0a.7.7 0 0 0-.7.7v12.6a.7.7 0 0 0 .7.7h2.6a.7.7 0 0 0 .7-.7V1.7a.7.7 0 0 0-.7-.7h-2.6z"></path></svg>
                    <svg role="img" height="16" width="16" aria-hidden="true" viewBox="0 0 16 16" data-encore-id="icon" class="spotify-play-icon"><path d="M3 1.713a.7.7 0 0 1 1.05-.607l10.89 6.288a.7.7 0 0 1 0 1.212L4.05 14.894A.7.7 0 0 1 3 14.288V1.713z"></path></svg>
                </button>
            </div>
        </div>
    </div>
}


@code {
    public static string? DeviceId{ get; set; }
    private IJSObjectReference? spotifyModule;
    IJSObjectReference? spotifyPlayer;
    public static SpotifyWebPlaybackState? spotifyPlayerState;
    private static SpotifyPlayer? _component;
    private static Timer? _timer;

    public bool IsPlaying {
        get
        {
            return spotifyPlayerState is not null 
                && spotifyPlayerState.Paused is not null 
                && !spotifyPlayerState.Paused.Value;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _component = this;
    }

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        await base.OnAfterRenderAsync( firstRender );

        if (spotifyModule is null)
        {
            spotifyModule = await JS.InvokeAsync<IJSObjectReference>( "import" , "./spotify.js" );
        }

        if (firstRender && !string.IsNullOrEmpty( SpotifyUserContext.AccessToken ))
        {
            spotifyPlayer = await spotifyModule.InvokeAsync<IJSObjectReference>( "createSpotifyPlayer" , SpotifyUserContext.AccessToken );
            await spotifyModule.InvokeVoidAsync( "setSpotifyPlayerListeners" , spotifyPlayer );
            await spotifyModule.InvokeVoidAsync( "connectSpotifyPlayer" , spotifyPlayer );
            await TransferPlaybackToPlayer();

            _timer = new System.Threading.Timer( async ( object? stateInfo ) =>
            {
                try
                {
                    await spotifyModule.InvokeVoidAsync( "getCurrentStateSpotifyPlayer" , spotifyPlayer );
                    await InvokeAsync( StateHasChanged );
                }
                catch
                {
                    _timer?.Dispose();
                }
            } , new System.Threading.AutoResetEvent( false ) , 2000 , 2000 );
        }
    }

    public async Task TransferPlaybackToPlayer()
    {
        if (string.IsNullOrEmpty( SpotifyUserContext.AccessToken ) || string.IsNullOrEmpty( DeviceId ))
        {
            return;
        }

        HttpClient client = ClientFactory.CreateClient();
        SpotifyPlaybackState? currentState = await client.GetPlayerPlaybackState( SpotifyUserContext.AccessToken );
        if (currentState != null && currentState.IsPlaying())
        {
            return;
        }

        if (spotifyModule is null)
        {
            spotifyModule = await JS.InvokeAsync<IJSObjectReference>( "import" , "./spotify.js" );
        }

        string? response = await client.SetPlayerCurrentPlaybackAndPlay( SpotifyUserContext.AccessToken , DeviceId );
    }

    [JSInvokable( "TransferPlaybackToPlayerJS" )]
    public static async Task TransferPlaybackToPlayerJS()
    {
        if (_component == null || string.IsNullOrEmpty( _component.SpotifyUserContext.AccessToken ) || string.IsNullOrEmpty( DeviceId ))
        {
            return;
        }

        HttpClient client = _component.ClientFactory.CreateClient();
        SpotifyPlaybackState? currentState = await client.GetPlayerPlaybackState( _component.SpotifyUserContext.AccessToken );
        if (currentState != null && currentState.IsConnectedToDevice( DeviceId ))
        {
            return;
        }

        string? response = await client.SetPlayerCurrentPlaybackAndPlay( _component.SpotifyUserContext.AccessToken , DeviceId );
    }

    [JSInvokable( "SetSpotifyDeviceId" )]
    public static void SetSpotifyDeviceId( string? deviceId)
    {
        DeviceId = deviceId;
    }

    [JSInvokable( "SpotifyStateHasChanged" )]
    public static bool SpotifyStateHasChanged( SpotifyWebPlaybackState? spotifyWebPlaybackStateUpdated )
    {
        spotifyPlayerState = spotifyWebPlaybackStateUpdated;
        _component?.Refresh();
        return true;
    }

    public void Refresh()
    {
        InvokeAsync(StateHasChanged);
    }

    protected async Task PlaySpotify()
    {
        if (spotifyModule is null)
        {
            spotifyModule = await JS.InvokeAsync<IJSObjectReference>( "import" , "./spotify.js" );
        }

        await spotifyModule.InvokeVoidAsync( "play" , spotifyPlayer );
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (spotifyModule is not null)
        {
            await spotifyModule.InvokeVoidAsync( "disconnectSpotifyPlayer" , spotifyPlayer );
            await spotifyModule.DisposeAsync();
        }

        if(_timer is not null)
        {
            await _timer.DisposeAsync();
        }
    }
}
