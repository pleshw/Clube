@using Clube.Data.Spotify
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SpotifyUserContext SpotifyUserContext
@inject IHttpClientFactory ClientFactory

@if (SpotifyUserContext.AccessToken is null ||  SpotifyUserContext.CurrentUser is null)
{
    <SpotifyLoginButton></SpotifyLoginButton>
}
else
{
    <div class="row justify-content-center align-content-center bg-spotify-black w-100 m-0 p-2" style="height: 90px;">
        <div class="row col-3 align-content-center align-items-center">
            <span class="text-white fw-bold">@spotifyPlayerState?.TrackWindow?.CurrentTrack?.Name</span>
        </div>
        <div class="row col-4 justify-content-around gap-3">
            <div class="row col-12 justify-content-center">
                <button class="playing-state-button p-0 @(IsPlaying ? "playing" : "")" @onclick="PlaySpotify">
                    <svg role="img" height="16" width="16" aria-hidden="true" viewBox="0 0 16 16" data-encore-id="icon" class="spotify-pause-icon"><path d="M2.7 1a.7.7 0 0 0-.7.7v12.6a.7.7 0 0 0 .7.7h2.6a.7.7 0 0 0 .7-.7V1.7a.7.7 0 0 0-.7-.7H2.7zm8 0a.7.7 0 0 0-.7.7v12.6a.7.7 0 0 0 .7.7h2.6a.7.7 0 0 0 .7-.7V1.7a.7.7 0 0 0-.7-.7h-2.6z"></path></svg>
                    <svg role="img" height="16" width="16" aria-hidden="true" viewBox="0 0 16 16" data-encore-id="icon" class="spotify-play-icon"><path d="M3 1.713a.7.7 0 0 1 1.05-.607l10.89 6.288a.7.7 0 0 1 0 1.212L4.05 14.894A.7.7 0 0 1 3 14.288V1.713z"></path></svg>
                </button>
            </div>
            <div class="col-12 container">
                <div class="progress rounded-0" role="progressbar" style="height: 2px" aria-label="Basic example" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">
                    <div class="progress-bar bg-spotify-green bg-gradient" style="width: 100%"></div>
                </div>
            </div>
        </div>

        <div class="row col-3">
        </div>
    </div>
}


@code {
    private IJSObjectReference? spotifyModule;
    IJSObjectReference? spotifyPlayer;
    public static SpotifyWebPlaybackState? spotifyPlayerState;
    private static SpotifyPlayer? _component;

    public bool IsPlaying {
        get
        {
            return spotifyPlayerState is not null 
                && spotifyPlayerState.Paused is not null 
                && !spotifyPlayerState.Paused.Value;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _component = this;
    }

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        await base.OnAfterRenderAsync( firstRender );

        if (spotifyModule is null)
        {
            spotifyModule = await JS.InvokeAsync<IJSObjectReference>( "import" , "./spotify.js" );
        }
        if (firstRender && !string.IsNullOrEmpty( SpotifyUserContext.AccessToken ))
        {
            spotifyPlayer = await spotifyModule.InvokeAsync<IJSObjectReference>( "createSpotifyPlayer" , SpotifyUserContext.AccessToken );
            await spotifyModule.InvokeVoidAsync( "setSpotifyPlayerListeners" , spotifyPlayer );
            await spotifyModule.InvokeVoidAsync( "connectSpotifyPlayer" , spotifyPlayer );

            HttpClient client = ClientFactory.CreateClient();
            SpotifyPlaybackState? currentState = await client.GetPlayerPlaybackState( SpotifyUserContext.AccessToken );
        }
    }

    [JSInvokable( "SpotifyStateHasChanged" )]
    public static bool SpotifyStateHasChanged( SpotifyWebPlaybackState? spotifyWebPlaybackStateUpdated )
    {
        spotifyPlayerState = spotifyWebPlaybackStateUpdated;
        _component?.Refresh();
        return true;
    }

    public void Refresh()
    {
        StateHasChanged();
    }

    protected async Task PlaySpotify()
    {
        if (spotifyModule is null)
        {
            spotifyModule = await JS.InvokeAsync<IJSObjectReference>( "import" , "./spotify.js" );
        }

        await spotifyModule.InvokeVoidAsync( "play" , spotifyPlayer );
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (spotifyModule is not null)
        {
            await spotifyModule.InvokeVoidAsync( "disconnectSpotifyPlayer" , spotifyPlayer );
            await spotifyModule.DisposeAsync();
        }
    }
}
