@using Clube.Data.Spotify
@using Clube.Data;
@using System.Security.Claims
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory ClientFactory
@if (string.IsNullOrEmpty( DeviceId ))
{
    <div class="row justify-content-center align-content-center w-100 m-0 p-5">
        Carregando Spotify...
    </div>
}
else if (userSpotifyClaim == null || !userSpotifyClaim.IsAuthenticated)
{
    <div class="row justify-content-center align-content-center w-100 m-0 p-5">
        <SpotifyLoginButton></SpotifyLoginButton>
    </div>
}
else
{
    <div class="row justify-content-between align-content-center bg-spotify-black w-100 m-0 p-2 shadow" style="height: 90px;">
        <div class="row col-10 align-content-center justify-content-between align-items-center h-100">
            <div class="col-6 row p-3">
                <a href="https://open.spotify.com/" target="_blank">
                    <div class="col-12">
                        <img class="img-fluid" style="min-width: 100px;image-rendering: optimizeQuality!important;" src="icons/spotify-logo-green-nobg.png" />
                    </div>
                </a>
            </div>
            <div class="col-6">
                @if (PlayerCurrentTrack != null)
                {
                    <a target="_blank" class="text-decoration-none" href="@PlayerCurrentTrack.Uri">
                        <span style="font-size: 14px;" class="text-white fw-bold">@PlayerCurrentTrack.Name</span>
                    </a>
                }
            </div>
        </div>
        <div class="row col-2 justify-content-start align-items-center">
            <div class="row col-12 justify-content-center">
                <SpotifyPlayPauseButton PlayerComponent="_component" State="@(IsPlaying ? "playing" : "")"></SpotifyPlayPauseButton>
            </div>
        </div>
    </div>
}

@code {
    public static string? DeviceId { get; set; }
    private IJSObjectReference? spotifyModule;
    private SpotifyJSInterop? spotifyJSInterop;
    public IJSObjectReference? spotifyPlayer;
    public static SpotifyWebPlaybackState? spotifyWebPlayerState;
    private static SpotifyPlayer? _component;

    public ClaimsIdentity? userSpotifyClaim;

    private static SpotifyTrack? PlayerCurrentTrack;

    public static string? AccessToken;

    public bool IsPlaying
    {
        get
        {
            return PlayerCurrentTrack is not null
                && spotifyWebPlayerState is not null
                && spotifyWebPlayerState.Paused is not null
                && !spotifyWebPlayerState.Paused.Value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        spotifyJSInterop = new();

        _component = this;
    }

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        await base.OnAfterRenderAsync( firstRender );

        if (firstRender)
        {
            if (spotifyModule is null)
            {
                spotifyModule = await JS.InvokeAsync<IJSObjectReference>( "import" , "./spotify.js" );
            }

            await InitSpotifyPlayer();
            await SpotifyAuthCheck();
            await UpdateSpotifyPlayerState();
        }
    }

    private async Task SpotifyAuthCheck()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var spotifyTokenExpirationClaim = authState.User.FindFirst( "spotifyAccessTokenExpiration" );
        if (spotifyTokenExpirationClaim != null && DateTime.TryParse( spotifyTokenExpirationClaim.Value , out var expirationTime ))
        {
            if (expirationTime >= DateTime.UtcNow)
            {
                userSpotifyClaim = authState.User.Identities.Where( i => i.IsAuthenticated && i.AuthenticationType == "Spotify" ).FirstOrDefault();
                AccessToken = authState.User.FindFirst( "spotifyAccessToken" )?.Value;
                await InvokeAsync( StateHasChanged );
            }
        }
    }

    private async Task InitSpotifyPlayer()
    {
        if (!string.IsNullOrEmpty( AccessToken ) && spotifyJSInterop is not null && spotifyModule is not null)
        {
            spotifyPlayer = await spotifyJSInterop.InitSpotifyPlayer( AccessToken , spotifyModule );
            HttpClient client = ClientFactory.CreateClient();
            SpotifyPlaybackState? currentState = await client.GetPlayerPlaybackState( AccessToken );
        }
    }

    [JSInvokable( "TransferPlaybackToPlayerJS" )]
    public static async Task<bool> TransferPlaybackToPlayerJS()
    {
        if (_component == null || string.IsNullOrEmpty( AccessToken ) || string.IsNullOrEmpty( DeviceId ))
        {
            return false;
        }

        HttpClient client = _component!.ClientFactory.CreateClient();
        SpotifyPlaybackState? currentState = await client.GetPlayerPlaybackState( AccessToken );
        bool playingOnThisDevice = await client.CurrentlyPlayingOnDevice( AccessToken , "CdR" );

        if (!playingOnThisDevice)
        {
            await client.SetPlayerCurrentPlayback( AccessToken , DeviceId );
            return true;
        }

        return false;
    }

    [JSInvokable( "SetSpotifyDeviceId" )]
    public static void SetSpotifyDeviceId( string? deviceId )
    {
        DeviceId = deviceId;
    }

    [JSInvokable( "SpotifyStateHasChanged" )]
    public static async Task SpotifyStateHasChanged( SpotifyWebPlaybackState? spotifyWebPlaybackStateUpdated )
    {
        if (spotifyWebPlaybackStateUpdated != spotifyWebPlayerState && _component is not null)
        {
            spotifyWebPlayerState = spotifyWebPlaybackStateUpdated;

            if (spotifyWebPlayerState?.TrackWindow?.CurrentTrack?.Id is not null)
            {
                await _component.UpdateSpotifyPlayerState( spotifyWebPlayerState.TrackWindow.CurrentTrack.Id );
            }
            else
            {
                PlayerCurrentTrack = null;
                await _component.UpdateSpotifyPlayerState();
            }
        }
    }

    public async Task UpdateSpotifyPlayerState()
    {
        if (!string.IsNullOrEmpty( AccessToken ))
        {
            HttpClient client = ClientFactory.CreateClient();
            SpotifyPlaybackState? playbackState = await client.GetPlayerPlaybackState( AccessToken );
            PlayerCurrentTrack = await client.GetSpotifyTrack( AccessToken , playbackState?.Item?.Id ?? "" );
        }

        await InvokeAsync( StateHasChanged );
    }

    public async Task UpdateSpotifyPlayerState( string trackId )
    {
        if (!string.IsNullOrEmpty( AccessToken ))
        {
            HttpClient client = ClientFactory.CreateClient();
            PlayerCurrentTrack = await client.GetSpotifyTrack( AccessToken , trackId );

            if (PlayerCurrentTrack != null)
            {
                await InvokeAsync( StateHasChanged );
            }
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (spotifyModule is not null)
        {
            await spotifyModule.DisposeAsync();
        }
    }
}
